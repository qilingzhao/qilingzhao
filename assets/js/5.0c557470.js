(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{351:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_6-null-the-missing-semester-of-your-cs-education"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-null-the-missing-semester-of-your-cs-education"}},[e._v("#")]),e._v(" 6.NULL:The Missing Semester of Your CS Education")]),e._v(" "),a("h2",{attrs:{id:"lec1-course-overview-the-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lec1-course-overview-the-shell"}},[e._v("#")]),e._v(" Lec1.Course overview + the shell")]),e._v(" "),a("h3",{attrs:{id:"shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[e._v("#")]),e._v(" Shell")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" - "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will cd to the directory you were perviously in")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redirect STDOUT with append")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# take output of the program to the left and make input of the program to the right")]),e._v("\n")])])]),a("h3",{attrs:{id:"permission"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#permission"}},[e._v("#")]),e._v(" Permission")]),e._v(" "),a("p",[e._v("First, the d at the beginning of the line tells us that missing is a directory. Then follow three groups of three characters (rwx). These indicate what permissions the owner of the file (missing), the owning group (users), and everyone else respectively have on the relevant item.")]),e._v(" "),a("h3",{attrs:{id:"quote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quote"}},[e._v("#")]),e._v(" Quote")]),e._v(" "),a("p",[e._v("https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html#Double-Quotes")]),e._v(" "),a("h2",{attrs:{id:"lec2-shell-tools-and-scripting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lec2-shell-tools-and-scripting"}},[e._v("#")]),e._v(" Lec2.Shell Tools and Scripting")]),e._v(" "),a("h3",{attrs:{id:"shell-scripting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-scripting"}},[e._v("#")]),e._v(" Shell Scripting")]),e._v(" "),a("p",[e._v("To assign variables in bash, use the syntax "),a("code",[e._v("foo=bar")]),e._v(" and access the value of variable  with "),a("code",[e._v("$foo")]),e._v(". (Note that "),a("code",[e._v("foo = bar")]),e._v(" will not work, in general, in shell script the space character will perform argument splitting)")]),e._v(" "),a("p",[e._v("Strings delimited with "),a("code",[e._v("'")]),e._v("' are literal strings and will not subsitute variable values where as "),a("code",[e._v('"')]),e._v("delimited strings will.")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bar\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$foo")]),e._v('"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bar")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$foo")]),e._v("'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# $foo")]),e._v("\n")])])]),a("p",[e._v("a shell script file(mcd.sh):")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-name function"}},[e._v("mcdfunc")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$0")]),e._v('"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# > $ mcdfunc 123                                                                ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# mcdfunc")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# zhao70@laptop ~/123  ")]),e._v("\n")])])]),a("p",[e._v("source命令也称“点命令”， 是bash的内部命令")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" mcd.sh "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# execute the script in our shell and load it ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" mcd.sh\n")])])]),a("p",[e._v("source filename, sh filename 及 ./filename执行脚本的三者区别？")]),e._v(" "),a("ol",[a("li",[e._v('当shell脚本具有可执行权限时，用sh filename与./filename执行脚本是没有区别得。\n./filename是因为当前目录没有在PATH中，所有"."是用来表示当前目录的。')]),e._v(" "),a("li",[e._v("sh filename 重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell新建的、改变的变量不会被带回父shell，除非使用export。")]),e._v(" "),a("li",[e._v("source filename：这个命令其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("$0")]),e._v(" - Name of the script")]),e._v(" "),a("li",[a("code",[e._v("$1")]),e._v(" to "),a("code",[e._v("$9")]),e._v(" - Arguments to the script. "),a("code",[e._v("$1")]),e._v(" is the first argument and so on.")]),e._v(" "),a("li",[a("code",[e._v("$@")]),e._v(" - All the arguments")]),e._v(" "),a("li",[a("code",[e._v("$#")]),e._v(" - Number of arguments")]),e._v(" "),a("li",[a("code",[e._v("$?")]),e._v(" - Return code of the previous command")]),e._v(" "),a("li",[a("code",[e._v("$$")]),e._v(" - Process identification number (PID) for the current script")]),e._v(" "),a("li",[a("code",[e._v("!!")]),e._v(" - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing "),a("code",[e._v("sudo !!")])]),e._v(" "),a("li",[a("code",[e._v("$_")]),e._v(" - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing "),a("code",[e._v("Esc")]),e._v(" followed by "),a("code",[e._v(".")])])]),e._v(" "),a("p",[a("strong",[e._v("command substitution")]),e._v(":  get the output of a command as a variable.  Whenever you place "),a("code",[e._v("$( CMD )")]),e._v(" it will execute "),a("code",[e._v("CMD")]),e._v(", get the output of the command and substitute it in place.\n"),a("strong",[e._v("process substitution")]),e._v(": "),a("code",[e._v("<( CMD )")]),e._v(" will execute "),a("code",[e._v("CMD")]),e._v(" and place the output in a temporary file and substitute the "),a("code",[e._v("<()")]),e._v(" with that file’s name. This is useful when commands expect values to be passed by "),a("em",[e._v("file")]),e._v(" instead of by "),a("em",[e._v("STDIN")]),e._v(". "),a("code",[e._v("diff <(ls foo) <(ls bar)")])]),e._v(" "),a("p",[a("strong",[e._v("shell globbing")]),e._v(": expanding expressions by carrying out filename expansion.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Wildcards: use "),a("code",[e._v("?")]),e._v(" and "),a("code",[e._v("*")]),e._v(" to match one or any amount of characters respectively.")])]),e._v(" "),a("li",[a("p",[e._v("Curly braces "),a("code",[e._v("{}")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("foo,bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" convert image."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("png,jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("p",[a("strong",[e._v("shebang")]),e._v(": at the top of the script. It is a good practice to write shebang lines using the  "),a("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/env.1.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("env")]),a("OutboundLink")],1),e._v(" command that will resolve to wherever the command lives in the system, increasing the portability of your scripts.")]),e._v(" "),a("h3",{attrs:{id:"shell-tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-tools"}},[e._v("#")]),e._v(" Shell Tools")]),e._v(" "),a("h4",{attrs:{id:"查找文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找文件"}},[e._v("#")]),e._v(" 查找文件")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查找所有名称为src的文件夹")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -name src -type d\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查找所有文件夹路径中包含test的python文件")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -path "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'**/test/**/*.py'")]),e._v(" -type f\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查找前一天修改的所有文件")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -mtime -1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查找所有大小在500k至10M的tar.gz文件")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -size +500k -size -10M -name "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'*.tar.gz'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Delete all files with .tmp extension")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -name "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'*.tmp'")]),e._v(" -exec "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Find all PNG files and convert them to JPG")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -name "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'*.png'")]),e._v(" -exec convert "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(".jpg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("如果您希望模式匹配时是不区分大小写，可以使用"),a("code",[e._v("-iname")]),e._v("选项")]),e._v(" "),a("h4",{attrs:{id:"查找shell命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找shell命令"}},[e._v("#")]),e._v(" 查找shell命令")]),e._v(" "),a("p",[e._v("对于大多数的shell来说，您可以使用 "),a("code",[e._v("Ctrl+R")]),e._v(" 对命令历史记录进行回溯搜索。敲 "),a("code",[e._v("Ctrl+R")]),e._v(" 后您可以输入子串来进行匹配，查找历史命令行。")]),e._v(" "),a("p",[e._v("输入命令时，如果您在命令的开头加上一个空格，它就不会被加进shell记录中。当你输入包含密码或是其他敏感信息的命令时会用到这一特性。")]),e._v(" "),a("h2",{attrs:{id:"lec3-vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lec3-vim"}},[e._v("#")]),e._v(" Lec3.Vim")]),e._v(" "),a("h3",{attrs:{id:"model-editing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-editing"}},[e._v("#")]),e._v(" Model editing")]),e._v(" "),a("p",[e._v("Vim has multiple operating modes.")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Normal")]),e._v(": for moving around a file and making edits")]),e._v(" "),a("li",[a("strong",[e._v("Insert")]),e._v(": for inserting text(press "),a("code",[e._v("i")]),e._v(")")]),e._v(" "),a("li",[a("strong",[e._v("Replace")]),e._v(": for replacing text(press "),a("code",[e._v("R")]),e._v(")")]),e._v(" "),a("li",[a("strong",[e._v("Visual")]),e._v(" (plain"),a("code",[e._v("v")]),e._v(", line"),a("code",[e._v("V")]),e._v(", or block"),a("code",[e._v("<C-v>")]),e._v("): for selecting blocks of text")]),e._v(" "),a("li",[a("strong",[e._v("Command-line")]),e._v(": for running a command(press"),a("code",[e._v(":")]),e._v(")")])]),e._v(" "),a("h3",{attrs:{id:"basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basics"}},[e._v("#")]),e._v(" Basics")]),e._v(" "),a("h4",{attrs:{id:"buffers-tabs-and-windows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffers-tabs-and-windows"}},[e._v("#")]),e._v(" Buffers, tabs, and windows")]),e._v(" "),a("p",[e._v("Vim maintains a set of open files, called “buffers”.  A Vim session has a number of tabs, each of which has a number of windows (split panes). A given buffer may be open in "),a("em",[e._v("multiple")]),e._v(" windows, even within the same tab.")]),e._v(" "),a("h4",{attrs:{id:"command-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-line"}},[e._v("#")]),e._v(" Command-line")]),e._v(" "),a("ul",[a("li",[a("code",[e._v(":e {name of file}")]),e._v(" open file for editing")]),e._v(" "),a("li",[a("code",[e._v(":ls")]),e._v(" show open buffers")]),e._v(" "),a("li",[a("code",[e._v(":b {num}")]),e._v(" 可切换buffer (num为buffer list中的编号)")]),e._v(" "),a("li",[a("code",[e._v(":bn")]),e._v(" -- buffer列表中下一个 buffer")]),e._v(" "),a("li",[a("code",[e._v(":bp")]),e._v(" -- buffer列表中前一个 buffer")]),e._v(" "),a("li",[a("code",[e._v(":b#")]),e._v(" -- 你之前所在的前一个 buffer")]),e._v(" "),a("li",[a("code",[e._v(":help {topic}")]),e._v(" open help")])]),e._v(" "),a("h3",{attrs:{id:"vim-s-interface-is-a-programming-language"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vim-s-interface-is-a-programming-language"}},[e._v("#")]),e._v(" Vim’s interface is a programming language")]),e._v(" "),a("h4",{attrs:{id:"movement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#movement"}},[e._v("#")]),e._v(" Movement")]),e._v(" "),a("ul",[a("li",[e._v("Words: "),a("code",[e._v("w")]),e._v(" (next word), "),a("code",[e._v("b")]),e._v(" (beginning of word), "),a("code",[e._v("e")]),e._v(" (end of word)\nw - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。\ne - 从当前光标当前位置直到单词末尾，包括最后一个字符。\n$ - 从当前光标当前位置直到当前行末。")]),e._v(" "),a("li",[e._v("Lines: "),a("code",[e._v("0")]),e._v(" (beginning of line), "),a("code",[e._v("^")]),e._v(" (first non-blank character), "),a("code",[e._v("$")]),e._v(" (end of line)")]),e._v(" "),a("li",[e._v("Screen: "),a("code",[e._v("H")]),e._v(" (top of screen), "),a("code",[e._v("M")]),e._v(" (middle of screen), "),a("code",[e._v("L")]),e._v(" (bottom of screen)")]),e._v(" "),a("li",[e._v("Scroll: "),a("code",[e._v("Ctrl-u")]),e._v(" (up), "),a("code",[e._v("Ctrl-d")]),e._v(" (down)")]),e._v(" "),a("li",[e._v("File: "),a("code",[e._v("gg")]),e._v(" (beginning of file), "),a("code",[e._v("G")]),e._v(" (end of file)")]),e._v(" "),a("li",[e._v("Line numbers: "),a("code",[e._v(":{number}<CR>")]),e._v(" or "),a("code",[e._v("{number}G")]),e._v(" (line {number}) //"),a("code",[e._v("<CR>")]),e._v("就是回车")]),e._v(" "),a("li",[e._v("Misc: "),a("code",[e._v("%")]),e._v(" (corresponding item)")]),e._v(" "),a("li",[e._v("Find: "),a("code",[e._v("f{character}")]),e._v(", "),a("code",[e._v("t{character}")]),e._v(", "),a("code",[e._v("F{character}")]),e._v(", "),a("code",[e._v("T{character}")]),e._v(" "),a("ul",[a("li",[e._v("find/to(f为光标在匹配字母上， t为光标在匹配字母前，大写为反向查找) forward/backward {character} on the "),a("strong",[e._v("current line")])]),e._v(" "),a("li",[a("code",[e._v(",")]),e._v("(the previous)/ "),a("code",[e._v(";")]),e._v("(the next) for navigating matches")])])])]),e._v(" "),a("h4",{attrs:{id:"edits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#edits"}},[e._v("#")]),e._v(" Edits")]),e._v(" "),a("p",[a("code",[e._v("d{motion}")]),e._v(" delete {motion}")]),e._v(" "),a("ul",[a("li",[e._v("e.g. "),a("code",[e._v("dw")]),e._v(" is delete word, "),a("code",[e._v("d$")]),e._v(" is delete to end of line, "),a("code",[e._v("d0")]),e._v(" is delete to beginning of line")]),e._v(" "),a("li",[a("code",[e._v("c{motion}")]),e._v(" change {motion}\n"),a("ul",[a("li",[e._v("e.g. "),a("code",[e._v("cw")]),e._v(" is change word")]),e._v(" "),a("li",[e._v("like "),a("code",[e._v("d{motion}")]),e._v(" followed by "),a("code",[e._v("i")])])])]),e._v(" "),a("li",[a("code",[e._v("x")]),e._v(" delete character (equal do "),a("code",[e._v("dl")]),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("s")]),e._v(" substitute character (equal to "),a("code",[e._v("xi")]),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("r{character}")]),e._v("replace character")]),e._v(" "),a("li",[e._v("Visual mode + manipulation\n"),a("ul",[a("li",[e._v("select text, "),a("code",[e._v("d")]),e._v(" to delete it or "),a("code",[e._v("c")]),e._v(" to change it")])])]),e._v(" "),a("li",[a("code",[e._v("u")]),e._v(" to undo, "),a("code",[e._v("U")]),e._v("恢复到该行的原始状态, "),a("code",[e._v("<C-r>")]),e._v(" to redo")]),e._v(" "),a("li",[a("code",[e._v("y")]),e._v(" to copy / “yank” (some other commands like "),a("code",[e._v("d")]),e._v(" also copy)")]),e._v(" "),a("li",[a("code",[e._v("p")]),e._v(" to paste")]),e._v(" "),a("li",[a("code",[e._v("~")]),e._v(" flips the case of a character")]),e._v(" "),a("li",[a("code",[e._v("gu")]),e._v("把选定范围全部小写, "),a("code",[e._v("gU")]),e._v("把选定范围全部小写")])]),e._v(" "),a("h4",{attrs:{id:"modifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modifiers"}},[e._v("#")]),e._v(" Modifiers")]),e._v(" "),a("p",[e._v("You can use modifiers to change the meaning of a noun. Some modifiers are "),a("code",[e._v("i")]),e._v(", which means “inner” or “inside”, and "),a("code",[e._v("a")]),e._v(", which means “around”.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ci(")]),e._v(" change the contents inside the current pair of parentheses")]),e._v(" "),a("li",[a("code",[e._v("ci[")]),e._v(" change the contents inside the current pair of square brackets")]),e._v(" "),a("li",[a("code",[e._v("da'")]),e._v(" delete a single-quoted string, including the surrounding single quotes")])]),e._v(" "),a("h3",{attrs:{id:"extending-vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extending-vim"}},[e._v("#")]),e._v(" Extending Vim")]),e._v(" "),a("p",[e._v("Contrary to outdated advice that you might find on the internet, you do "),a("em",[e._v("not")]),e._v(" need to use a plugin manager for Vim (since Vim 8.0). Instead, you can use the built-in package management system. Simply create the directory "),a("code",[e._v("~/.vim/pack/vendor/start/")]),e._v(", and put plugins in there (e.g. via "),a("code",[e._v("git clone")]),e._v(").")]),e._v(" "),a("h3",{attrs:{id:"advanced-vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-vim"}},[e._v("#")]),e._v(" Advanced Vim")]),e._v(" "),a("h4",{attrs:{id:"search-and-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#search-and-replace"}},[e._v("#")]),e._v(" Search and replace")]),e._v(" "),a("p",[a("code",[e._v(":s")]),e._v(" (substitute) command ("),a("a",{attrs:{href:"http://vim.wikia.com/wiki/Search_and_replace",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("%s/foo/bar/g")])]),e._v(" "),a("ul",[a("li",[e._v("replace foo with bar globally in file")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("%s/\\[.*\\](\\(.*\\))/\\1/g")])]),e._v(" "),a("ul",[a("li",[e._v("replace named Markdown links with plain URLs")])])])]),e._v(" "),a("h3",{attrs:{id:"macros"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#macros"}},[e._v("#")]),e._v(" Macros")]),e._v(" "),a("h2",{attrs:{id:"lec4-data-wrangling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lec4-data-wrangling"}},[e._v("#")]),e._v(" Lec4.Data Wrangling")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" myserver journalctl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" sshd\n")])])]),a("p",[e._v("Notice that we’re using a pipe to stream a "),a("em",[e._v("remote")]),e._v(" file through "),a("code",[e._v("grep")]),e._v(" on our local computer!")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" myserver "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'journalctl | grep sshd | grep \"Disconnected from\"'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("less")]),e._v("\n")])])]),a("p",[e._v("Why the additional quoting? Well, our logs may be quite large, and it’s wasteful to stream it all to our computer and then do the filtering. Instead, we can do the filtering on the remote server, and then massage the data locally.")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" myserver journalctl\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" sshd\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Disconnected from"')]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/.*Disconnected from //'")]),e._v("\n")])])]),a("p",[e._v("The "),a("code",[e._v("s")]),e._v(" command is written on the form: "),a("code",[e._v("s/REGEX/SUBSTITUTION/")]),e._v(", where "),a("code",[e._v("REGEX")]),e._v(" is the regular expression you want to search for, and "),a("code",[e._v("SUBSTITUTION")]),e._v(" is the text you want to substitute matching text with.")]),e._v(" "),a("h4",{attrs:{id:"regular-expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regular-expressions"}},[e._v("#")]),e._v(" Regular expressions")]),e._v(" "),a("ul",[a("li",[a("code",[e._v(".")]),e._v(" means “any single character” except newline")]),e._v(" "),a("li",[a("code",[e._v("*")]),e._v(" zero or more of the preceding match")]),e._v(" "),a("li",[a("code",[e._v("+")]),e._v(" one or more of the preceding match")]),e._v(" "),a("li",[a("code",[e._v("[abc]")]),e._v(" any one character of "),a("code",[e._v("a")]),e._v(", "),a("code",[e._v("b")]),e._v(", and "),a("code",[e._v("c")])]),e._v(" "),a("li",[a("code",[e._v("(RX1|RX2)")]),e._v(" either something that matches "),a("code",[e._v("RX1")]),e._v(" or "),a("code",[e._v("RX2")])]),e._v(" "),a("li",[a("code",[e._v("^")]),e._v(" the start of the line")]),e._v(" "),a("li",[a("code",[e._v("$")]),e._v(" the end of the line")])]),e._v(" "),a("p",[e._v("todo: sed awk find sort grep")]),e._v(" "),a("h2",{attrs:{id:"lec5-command-line-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lec5-command-line-environment"}},[e._v("#")]),e._v(" Lec5.Command-line Environment")]),e._v(" "),a("h3",{attrs:{id:"job-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job-control"}},[e._v("#")]),e._v(" Job Control")]),e._v(" "),a("h4",{attrs:{id:"killing-a-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killing-a-process"}},[e._v("#")]),e._v(" Killing a process")]),e._v(" "),a("p",[e._v("Your shell is using a UNIX communication mechanism called a "),a("em",[e._v("signal")]),e._v(" to communicate information to the process.")]),e._v(" "),a("p",[e._v("In our case, when typing "),a("code",[e._v("Ctrl-C")]),e._v(" this prompts the shell to deliver a "),a("code",[e._v("SIGINT")]),e._v(" signal to the process.")]),e._v(" "),a("p",[e._v("Here’s a minimal example of a Python program that captures "),a("code",[e._v("SIGINT")]),e._v(" and ignores it, no longer stopping. To kill this program we can now use the "),a("code",[e._v("SIGQUIT")]),e._v(" signal instead, by typing "),a("code",[e._v("Ctrl-\\")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/usr/bin/env python3")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" time\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("signum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\nI got a SIGINT, but I am not stopping"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nsignal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("SIGINT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\r{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])]),a("p",[e._v("While "),a("code",[e._v("SIGINT")]),e._v(" and "),a("code",[e._v("SIGQUIT")]),e._v(" are both usually associated with terminal related requests, a more generic signal for asking a process to exit gracefully is the "),a("code",[e._v("SIGTERM")]),e._v(" signal. To send this signal we can use the "),a("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/kill.1.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("kill")]),a("OutboundLink")],1),e._v(" command, with the syntax "),a("code",[e._v("kill -TERM <PID>")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"pausing-and-backgrounding-processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pausing-and-backgrounding-processes"}},[e._v("#")]),e._v(" Pausing and backgrounding processes")]),e._v(" "),a("p",[a("code",[e._v("SIGSTOP")]),e._v(" pauses a process. In the terminal, typing "),a("code",[e._v("Ctrl-Z")]),e._v(" will prompt the shell to send a "),a("code",[e._v("SIGTSTP")]),e._v(" signal, short for Terminal Stop (i.e. the terminal’s version of "),a("code",[e._v("SIGSTOP")]),e._v(").")]),e._v(" "),a("p",[e._v("We can then continue the paused job in the foreground or in the background using "),a("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/fg.1p.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("fg")]),a("OutboundLink")],1),e._v(" or "),a("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/bg.1p.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("bg")]),a("OutboundLink")],1),e._v(", respectively.")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/jobs.1p.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("jobs")]),a("OutboundLink")],1),e._v(" command lists the unfinished jobs associated with the current terminal session.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/xiaoleiel/p/8349675.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("LINUX任务(jobs)详解"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("One more thing to know is that the "),a("code",[e._v("&")]),e._v(" suffix in a command will run the command in the background, giving you the prompt back, although it will still use the shell’s STDOUT which can be annoying (use shell redirections in that case).")]),e._v(" "),a("p",[e._v("To background an already running program you can do "),a("code",[e._v("Ctrl-Z")]),e._v(" followed by "),a("code",[e._v("bg")]),e._v(". Note that backgrounded processes are "),a("strong",[e._v("still children processes of your terminal")]),e._v(" and "),a("strong",[e._v("will die if you close the terminal")]),e._v(" (this will send yet another signal, "),a("code",[e._v("SIGHUP")]),e._v("). To prevent that from happening you can run the program with "),a("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/nohup.1.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("nohup")]),a("OutboundLink")],1),e._v(" (a "),a("strong",[e._v("wrapper to ignore")]),e._v(" "),a("code",[e._v("SIGHUP")]),e._v("), or use "),a("code",[e._v("disown")]),e._v(" if the process has already been started.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/zhaominpro/article/details/82630528",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux shell中2>&1的含义解释 "),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases"}},[e._v("#")]),e._v(" Aliases")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("alias")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("alias_name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"command_to_alias arg1 arg2"')]),e._v("\n")])])]),a("p",[e._v("Note that there is no space around the equal sign "),a("code",[e._v("=")]),e._v(", because "),a("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/alias.1p.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("alias")]),a("OutboundLink")],1),e._v(" is "),a("strong",[e._v("a shell command that takes a single argument")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"remote-machines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remote-machines"}},[e._v("#")]),e._v(" Remote Machines")])])}),[],!1,null,null,null);t.default=n.exports}}]);