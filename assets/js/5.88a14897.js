(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{351:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_6-null-the-missing-semester-of-your-cs-education"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-null-the-missing-semester-of-your-cs-education"}},[t._v("#")]),t._v(" 6.NULL:The Missing Semester of Your CS Education")]),t._v(" "),e("h2",{attrs:{id:"lec1-course-overview-the-shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lec1-course-overview-the-shell"}},[t._v("#")]),t._v(" Lec1.Course overview + the shell")]),t._v(" "),e("h3",{attrs:{id:"shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[t._v("#")]),t._v(" Shell")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" - "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will cd to the directory you were perviously in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# redirect STDOUT with append")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# take output of the program to the left and make input of the program to the right")]),t._v("\n")])])]),e("h3",{attrs:{id:"permission"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#permission"}},[t._v("#")]),t._v(" Permission")]),t._v(" "),e("p",[t._v("First, the d at the beginning of the line tells us that missing is a directory. Then follow three groups of three characters (rwx). These indicate what permissions the owner of the file (missing), the owning group (users), and everyone else respectively have on the relevant item.")]),t._v(" "),e("h3",{attrs:{id:"quote"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quote"}},[t._v("#")]),t._v(" Quote")]),t._v(" "),e("p",[t._v("https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html#Double-Quotes")]),t._v(" "),e("h2",{attrs:{id:"lec2-shell-tools-and-scripting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lec2-shell-tools-and-scripting"}},[t._v("#")]),t._v(" Lec2.Shell Tools and Scripting")]),t._v(" "),e("h3",{attrs:{id:"shell-scripting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-scripting"}},[t._v("#")]),t._v(" Shell Scripting")]),t._v(" "),e("p",[t._v("To assign variables in bash, use the syntax "),e("code",[t._v("foo=bar")]),t._v(" and access the value of variable  with "),e("code",[t._v("$foo")]),t._v(". (Note that "),e("code",[t._v("foo = bar")]),t._v(" will not work, in general, in shell script the space character will perform argument splitting)")]),t._v(" "),e("p",[t._v("Strings delimited with "),e("code",[t._v("'")]),t._v("' are literal strings and will not subsitute variable values where as "),e("code",[t._v('"')]),t._v("delimited strings will.")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("bar\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),t._v('"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bar")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),t._v("'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $foo")]),t._v("\n")])])]),e("p",[t._v("a shell script file(mcd.sh):")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("mcdfunc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0")]),t._v('"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# > $ mcdfunc 123                                                                ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mcdfunc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# zhao70@laptop ~/123  ")]),t._v("\n")])])]),e("p",[t._v("source命令也称“点命令”， 是bash的内部命令")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" mcd.sh "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# execute the script in our shell and load it ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" mcd.sh\n")])])]),e("p",[t._v("source filename, sh filename 及 ./filename执行脚本的三者区别？")]),t._v(" "),e("ol",[e("li",[t._v('当shell脚本具有可执行权限时，用sh filename与./filename执行脚本是没有区别得。\n./filename是因为当前目录没有在PATH中，所有"."是用来表示当前目录的。')]),t._v(" "),e("li",[t._v("sh filename 重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell新建的、改变的变量不会被带回父shell，除非使用export。")]),t._v(" "),e("li",[t._v("source filename：这个命令其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$0")]),t._v(" - Name of the script")]),t._v(" "),e("li",[e("code",[t._v("$1")]),t._v(" to "),e("code",[t._v("$9")]),t._v(" - Arguments to the script. "),e("code",[t._v("$1")]),t._v(" is the first argument and so on.")]),t._v(" "),e("li",[e("code",[t._v("$@")]),t._v(" - All the arguments")]),t._v(" "),e("li",[e("code",[t._v("$#")]),t._v(" - Number of arguments")]),t._v(" "),e("li",[e("code",[t._v("$?")]),t._v(" - Return code of the previous command")]),t._v(" "),e("li",[e("code",[t._v("$$")]),t._v(" - Process identification number (PID) for the current script")]),t._v(" "),e("li",[e("code",[t._v("!!")]),t._v(" - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing "),e("code",[t._v("sudo !!")])]),t._v(" "),e("li",[e("code",[t._v("$_")]),t._v(" - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing "),e("code",[t._v("Esc")]),t._v(" followed by "),e("code",[t._v(".")])])]),t._v(" "),e("p",[e("strong",[t._v("command substitution")]),t._v(":  get the output of a command as a variable.  Whenever you place "),e("code",[t._v("$( CMD )")]),t._v(" it will execute "),e("code",[t._v("CMD")]),t._v(", get the output of the command and substitute it in place.\n"),e("strong",[t._v("process substitution")]),t._v(": "),e("code",[t._v("<( CMD )")]),t._v(" will execute "),e("code",[t._v("CMD")]),t._v(" and place the output in a temporary file and substitute the "),e("code",[t._v("<()")]),t._v(" with that file’s name. This is useful when commands expect values to be passed by "),e("em",[t._v("file")]),t._v(" instead of by "),e("em",[t._v("STDIN")]),t._v(". "),e("code",[t._v("diff <(ls foo) <(ls bar)")])]),t._v(" "),e("p",[e("strong",[t._v("shell globbing")]),t._v(": expanding expressions by carrying out filename expansion.")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Wildcards: use "),e("code",[t._v("?")]),t._v(" and "),e("code",[t._v("*")]),t._v(" to match one or any amount of characters respectively.")])]),t._v(" "),e("li",[e("p",[t._v("Curly braces "),e("code",[t._v("{}")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo,bar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" convert image."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("png,jpg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),e("p",[e("strong",[t._v("shebang")]),t._v(": at the top of the script. It is a good practice to write shebang lines using the  "),e("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/env.1.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("env")]),e("OutboundLink")],1),t._v(" command that will resolve to wherever the command lives in the system, increasing the portability of your scripts.")]),t._v(" "),e("h3",{attrs:{id:"shell-tools"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-tools"}},[t._v("#")]),t._v(" Shell Tools")]),t._v(" "),e("h4",{attrs:{id:"查找文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找文件"}},[t._v("#")]),t._v(" 查找文件")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有名称为src的文件夹")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name src -type d\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有文件夹路径中包含test的python文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -path "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/test/**/*.py'")]),t._v(" -type f\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找前一天修改的所有文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -mtime -1\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有大小在500k至10M的tar.gz文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -size +500k -size -10M -name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.tar.gz'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Delete all files with .tmp extension")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.tmp'")]),t._v(" -exec "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Find all PNG files and convert them to JPG")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.png'")]),t._v(" -exec convert "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".jpg "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("如果您希望模式匹配时是不区分大小写，可以使用"),e("code",[t._v("-iname")]),t._v("选项")]),t._v(" "),e("h4",{attrs:{id:"查找shell命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找shell命令"}},[t._v("#")]),t._v(" 查找shell命令")]),t._v(" "),e("p",[t._v("对于大多数的shell来说，您可以使用 "),e("code",[t._v("Ctrl+R")]),t._v(" 对命令历史记录进行回溯搜索。敲 "),e("code",[t._v("Ctrl+R")]),t._v(" 后您可以输入子串来进行匹配，查找历史命令行。")]),t._v(" "),e("p",[t._v("输入命令时，如果您在命令的开头加上一个空格，它就不会被加进shell记录中。当你输入包含密码或是其他敏感信息的命令时会用到这一特性。")]),t._v(" "),e("h2",{attrs:{id:"lec3-vim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lec3-vim"}},[t._v("#")]),t._v(" Lec3.Vim")])])}),[],!1,null,null,null);s.default=n.exports}}]);