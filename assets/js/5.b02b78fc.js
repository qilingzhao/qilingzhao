(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{351:function(e,t,s){"use strict";s.r(t);var a=s(42),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_6-null-the-missing-semester-of-your-cs-education"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-null-the-missing-semester-of-your-cs-education"}},[e._v("#")]),e._v(" 6.NULL:The Missing Semester of Your CS Education")]),e._v(" "),s("h2",{attrs:{id:"lec1-course-overview-the-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lec1-course-overview-the-shell"}},[e._v("#")]),e._v(" Lec1.Course overview + the shell")]),e._v(" "),s("h3",{attrs:{id:"shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[e._v("#")]),e._v(" Shell")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" - "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will cd to the directory you were perviously in")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redirect STDOUT with append")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# take output of the program to the left and make input of the program to the right")]),e._v("\n")])])]),s("h3",{attrs:{id:"permission"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#permission"}},[e._v("#")]),e._v(" Permission")]),e._v(" "),s("p",[e._v("First, the d at the beginning of the line tells us that missing is a directory. Then follow three groups of three characters (rwx). These indicate what permissions the owner of the file (missing), the owning group (users), and everyone else respectively have on the relevant item.")]),e._v(" "),s("h3",{attrs:{id:"quote"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quote"}},[e._v("#")]),e._v(" Quote")]),e._v(" "),s("p",[e._v("https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html#Double-Quotes")]),e._v(" "),s("h2",{attrs:{id:"lec2-shell-tools-and-scripting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lec2-shell-tools-and-scripting"}},[e._v("#")]),e._v(" Lec2.Shell Tools and Scripting")]),e._v(" "),s("h3",{attrs:{id:"shell-scripting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-scripting"}},[e._v("#")]),e._v(" Shell Scripting")]),e._v(" "),s("p",[e._v("To assign variables in bash, use the syntax "),s("code",[e._v("foo=bar")]),e._v(" and access the value of variable  with "),s("code",[e._v("$foo")]),e._v(". (Note that "),s("code",[e._v("foo = bar")]),e._v(" will not work, in general, in shell script the space character will perform argument splitting)")]),e._v(" "),s("p",[e._v("Strings delimited with "),s("code",[e._v("'")]),e._v("' are literal strings and will not subsitute variable values where as "),s("code",[e._v('"')]),e._v("delimited strings will.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bar\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$foo")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bar")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$foo")]),e._v("'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# $foo")]),e._v("\n")])])]),s("p",[e._v("a shell script file(mcd.sh):")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[e._v("mcdfunc")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$0")]),e._v('"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# > $ mcdfunc 123                                                                ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# mcdfunc")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# zhao70@laptop ~/123  ")]),e._v("\n")])])]),s("p",[e._v("source命令也称“点命令”， 是bash的内部命令")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" mcd.sh "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# execute the script in our shell and load it ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" mcd.sh\n")])])]),s("ul",[s("li",[s("code",[e._v("$0")]),e._v(" - Name of the script")]),e._v(" "),s("li",[s("code",[e._v("$1")]),e._v(" to "),s("code",[e._v("$9")]),e._v(" - Arguments to the script. "),s("code",[e._v("$1")]),e._v(" is the first argument and so on.")]),e._v(" "),s("li",[s("code",[e._v("$@")]),e._v(" - All the arguments")]),e._v(" "),s("li",[s("code",[e._v("$#")]),e._v(" - Number of arguments")]),e._v(" "),s("li",[s("code",[e._v("$?")]),e._v(" - Return code of the previous command")]),e._v(" "),s("li",[s("code",[e._v("$$")]),e._v(" - Process identification number (PID) for the current script")]),e._v(" "),s("li",[s("code",[e._v("!!")]),e._v(" - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing "),s("code",[e._v("sudo !!")])]),e._v(" "),s("li",[s("code",[e._v("$_")]),e._v(" - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing "),s("code",[e._v("Esc")]),e._v(" followed by "),s("code",[e._v(".")])])]),e._v(" "),s("p",[s("strong",[e._v("command substitution")]),e._v(":  get the output of a command as a variable.  Whenever you place "),s("code",[e._v("$( CMD )")]),e._v(" it will execute "),s("code",[e._v("CMD")]),e._v(", get the output of the command and substitute it in place.\n"),s("strong",[e._v("process substitution")]),e._v(": "),s("code",[e._v("<( CMD )")]),e._v(" will execute "),s("code",[e._v("CMD")]),e._v(" and place the output in a temporary file and substitute the "),s("code",[e._v("<()")]),e._v(" with that file’s name. This is useful when commands expect values to be passed by "),s("em",[e._v("file")]),e._v(" instead of by "),s("em",[e._v("STDIN")]),e._v(". "),s("code",[e._v("diff <(ls foo) <(ls bar)")])])])}),[],!1,null,null,null);t.default=n.exports}}]);